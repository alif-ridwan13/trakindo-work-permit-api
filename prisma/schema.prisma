// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  email       String         @unique
  name        String
  password    String
  role        Role
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  submissions FormSubmission[] @relation("UserSubmissions")
  approvals   Approval[]       @relation("Approver")

  @@map("tb_m_users")
}

model Form {
  id          BigInt           @id @default(autoincrement())
  name        String           @unique @db.VarChar(100)
  slug        String           @unique @db.VarChar(100)
  sections    Section[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  submissions FormSubmission[]

  @@map("tb_m_forms")
}

model Section {
  id           BigInt     @id @default(autoincrement())
  name         String     @db.VarChar(100)
  index_number Int
  formId       BigInt
  form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("tb_m_sections")
}

model Question {
  id           BigInt               @id @default(autoincrement())
  index_number Int
  value        String               @db.VarChar(255)
  type         QuestionType
  sectionId    BigInt
  section      Section              @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  options      Option[]
  answers      FormSubmissionAnswer[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("tb_m_questions")
}

model Option {
  id         BigInt   @id @default(autoincrement())
  value      String   @db.VarChar(100)
  questionId BigInt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tb_m_options")
}

model SafetyEquipment {
  id        BigInt         @id @default(autoincrement())
  name      String         @unique @db.VarChar(100)
  category  SafetyCategory
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("tb_m_safety_equipments")
}

model FormSubmission {
  id             BigInt                 @id @default(autoincrement())
  formId         BigInt
  form           Form                   @relation(fields: [formId], references: [id])
  submittedById  String?
  submittedBy    User?                  @relation("UserSubmissions", fields: [submittedById], references: [id])
  submittedAt    DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  status         SubmissionStatus       @default(Pending)
  priority       Priority               @default(Normal)
  workDate       DateTime
  answers        FormSubmissionAnswer[]
  logs           FormSubmissionLog[]
  approvals      Approval[]             // Baris ini menghubungkan FormSubmission ke tabel Approval

  @@map("tb_tr_form_submissions")
}

model FormSubmissionAnswer {
  id           BigInt         @id @default(autoincrement())
  submissionId BigInt
  submission   FormSubmission @relation(fields: [submissionId], references: [id])
  questionId   BigInt
  question     Question       @relation(fields: [questionId], references: [id])
  value        String         @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("tb_tr_form_submission_answers")
}

model FormSubmissionLog {
  id           BigInt         @id @default(autoincrement())
  submissionId BigInt
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  action       String         @db.VarChar(100)
  actor        String         @db.VarChar(100)
  createdAt    DateTime       @default(now())

  @@map("tb_tr_submission_logs")
}

model Approval {
  id           BigInt         @id @default(autoincrement())
  submissionId BigInt
  submission   FormSubmission @relation(fields: [submissionId], references: [id])
  approvedById String
  approvedBy   User           @relation("Approver", fields: [approvedById], references: [id])
  status       ApprovalStatus
  level        Int
  comment      String?        @db.Text
  createdAt    DateTime       @default(now())

  @@map("tb_tr_approvals")
}

enum Role {
  ADMIN
  JRO
  EMPLOYEE
  VENDOR
}

enum QuestionType {
  Option
  Number
  Paragraph
  Text
  Date
  Signature
  YesNoNA
  Checkbox
  CheckboxFromMaster
}

enum SafetyCategory {
  APD
  Emergency
}

enum SubmissionStatus {
  Pending
  InReview
  Approved
  NeedRevise
}

enum ApprovalStatus {
  Approved
  Rejected
}

enum Priority {
  Normal
  High
}
